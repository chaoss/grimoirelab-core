# -*- coding: utf-8 -*-
#
# GrimoireLab logging setup.
#
# Logging is configured using 'structlog', 'django-structlog',
# and the standard library 'logging' module.
#
# More info:
#
# https://django-structlog.readthedocs.io/en/latest/
# https://docs.djangoproject.com/en/4.2/topics/logging/#configuring-logging
#

import structlog


# Default column styles for the console renderer.

styles = structlog.dev._ColorfulStyles

logger_name_formatter = structlog.dev.KeyValueColumnFormatter(
    key_style=None,
    value_style=styles.bright + styles.logger_name,
    reset_style=styles.reset,
    value_repr=str,
    prefix="[",
    postfix="]",
)

console_columns = [
    structlog.dev.Column(
        "timestamp",
        structlog.dev.KeyValueColumnFormatter(
            key_style=None,
            value_style=styles.timestamp,
            reset_style=styles.reset,
            value_repr=str,
        ),
    ),
    structlog.dev.Column(
        "level",
        structlog.dev.LogLevelColumnFormatter(
            structlog.dev.ConsoleRenderer.get_default_level_styles(),
            reset_style=styles.reset,
        ),
    ),
    structlog.dev.Column("logger", logger_name_formatter),
    structlog.dev.Column("logger_name", logger_name_formatter),
    structlog.dev.Column(
        "event",
        structlog.dev.KeyValueColumnFormatter(
            key_style=None,
            value_style=styles.bright,
            reset_style=styles.reset,
            value_repr=str,
        ),
    ),
    # Default formatter for all keys not explicitly mentioned.
    structlog.dev.Column(
        "",
        structlog.dev.KeyValueColumnFormatter(
            key_style=styles.kv_key,
            value_style=styles.kv_value,
            reset_style=styles.reset,
            value_repr=str,
        ),
    ),
]


# Configuration of chain processors for logs not generated by structlog.
# This will add default fields such the log level, timestamp, etc.

pre_chain_processors = [
    structlog.processors.TimeStamper(fmt="iso", utc=True),
    structlog.stdlib.add_log_level,
    structlog.stdlib.add_logger_name,
    structlog.stdlib.ExtraAdder(),
]


# Default logging configuration for GrimoireLab

_GRIMOIRELAB_LOGGING_CONFIG = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "plain": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processors": [
                structlog.stdlib.ProcessorFormatter.remove_processors_meta,
                structlog.dev.ConsoleRenderer(columns=console_columns),
            ],
            "foreign_pre_chain": pre_chain_processors,
        },
        "json": {
            "()": structlog.stdlib.ProcessorFormatter,
            "processors": [
                structlog.stdlib.ProcessorFormatter.remove_processors_meta,
                structlog.processors.JSONRenderer(),
            ],
            "foreign_pre_chain": pre_chain_processors,
        },
        "not_structured": {
            "format": "[%(asctime)s - %(name)s - %(levelname)s] - %(message)s",
        },
    },
    "handlers": {
        "default": {
            "class": "logging.StreamHandler",
            "formatter": "plain",
        },
        "json": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
    },
}


def configure_grimoirelab_logging(
    json_mode: bool = False,
    debug: bool = False,
) -> None:
    """
    Set up the GrimoireLab logging settings.

    :param json_mode: If True, use JSON format for logging.
    :param debug: If True, set logging level to DEBUG.
    """
    structlog.configure(
        processors=[
            structlog.contextvars.merge_contextvars,
            structlog.stdlib.filter_by_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso", utc=True),
            structlog.stdlib.add_log_level,
            structlog.stdlib.add_logger_name,
            structlog.processors.StackInfoRenderer(),
            structlog.processors.format_exc_info,
            structlog.processors.UnicodeDecoder(),
            structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )

    logging_settings = dict(_GRIMOIRELAB_LOGGING_CONFIG)
    logging_settings["loggers"] = {
        "": {
            "handlers": ["json"] if json_mode else ["default"],
            "level": "DEBUG" if debug else "INFO",
        },
    }

    return logging_settings
