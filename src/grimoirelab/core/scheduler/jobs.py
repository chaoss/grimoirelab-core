# -*- coding: utf-8 -*-
#
# Copyright (C) GrimoireLab Contributors
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#     Santiago Due√±as <sduenas@bitergia.com>
#     Jose Javier Merchante <jjmerchante@bitergia.com>
#

from __future__ import annotations

import logging

from typing import TYPE_CHECKING
from typing import Any

from cloudevents.conversion import to_json

import perceval.backend
import perceval.backends

from chronicler.eventizer import eventize
from rq.job import Job as JobRQ

from .errors import NotFoundError


if TYPE_CHECKING:
    from logging import LogRecord

logger = logging.getLogger(__name__)


class JobLogHandler(logging.StreamHandler):
    """Handler class for the job logs"""

    def __init__(self, job: JobRQ) -> None:
        logging.StreamHandler.__init__(self)
        self.job = job
        self.job.meta['log'] = []
        self.job.save_meta()

    def emit(self, record: LogRecord) -> None:
        log = {
            'created': record.created,
            'msg': self.format(record),
            'module': record.module,
            'level': self.level,
        }
        self.job.meta['log'].append(log)
        self.job.save_meta()


class JobResult:
    """Class to store the result of a Perceval job.

    It stores the summary of a Perceval job and other useful data
    such as the task and job identifiers, the backend and the
    category of the items generated.

    :param job_id: job identifier
    :param task_id: task identifier linked to this job
    :param backend: backend used to fetch the items
    :param category: category of the fetched items
    """

    def __init__(self, job_id: str, task_id: str, backend: str, category: str):
        self.job_id = job_id
        self.task_id = task_id
        self.backend = backend
        self.category = category
        self.summary = None

    def to_dict(self) -> dict[str, str | int]:
        """Convert object to a dict"""

        result = {
            'job_id': self.job_id,
            'task_id': self.task_id
        }

        if self.summary:
            result['fetched'] = self.summary.fetched
            result['skipped'] = self.summary.skipped
            result['last_uuid'] = self.summary.last_uuid
            result['min_offset'] = self.summary.min_offset
            result['max_offset'] = self.summary.max_offset
            result['last_offset'] = self.summary.last_offset
            result['extras'] = self.summary.extras
            if self.summary.min_updated_on:
                result['min_updated_on'] = self.summary.min_updated_on.timestamp()
            else:
                result['min_updated_on'] = None
            if self.summary.max_updated_on:
                result['max_updated_on'] = self.summary.max_updated_on.timestamp()
            else:
                result['max_updated_on'] = None
            if self.summary.last_updated_on:
                result['last_updated_on'] = self.summary.last_updated_on.timestamp()
            else:
                result['last_updated_on'] = None

        return result


class PercevalJob(JobRQ):
    """Class for wrapping Perceval jobs.

    Wrapper for running and executing Perceval backends. The items
    generated by the execution of a backend will be stored on the
    Redis queue named `qitems`. The result of the job can be obtained
    accessing to the property `result` of this object.
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._perceval_result = None
        self._big = None

    @classmethod
    def create(cls, *args, **kwargs) -> PercevalJob:
        """Override the create method to run this Class"""

        if len(args) > 0:
            args = list(args)
            args[0] = cls.run
        else:
            kwargs['func'] = cls.run

        return super().create(*args, **kwargs)

    @property
    def perceval_result(self) -> JobResult:
        has_big_summary = self._big and self._big.summary

        if not self._perceval_result.summary and has_big_summary:
            self._perceval_result.summary = self._big.summary

        return self._perceval_result

    def run(
        self,
        task_id: str,
        qitems: str,
        backend: str,
        category: str,
        backend_args: dict[str, Any],
    ) -> JobResult:
        """Run the backend with the given parameters.

        The method will run the backend assigned to this job,
        storing the fetched items in a Redis queue. The ongoing
        status of the job, can be accessed through the property
        `result`.

        Any exception during the execution of the process will
        be raised.

        :param task_id: ID of the task
        :param qitems: Redis queue to store items
        :param backend: Perceval backend to run
        :param category: Perceval backend category to run
        :param backend_args: parameters used to run the backend
        """

        try:
            bklass = perceval.backend.find_backends(perceval.backends)[0][backend]
        except KeyError:
            raise NotFoundError(element=backend)

        backend_args = backend_args.copy()

        self._perceval_result = JobResult(self.get_id(), task_id, backend, category)

        self._big = perceval.backend.BackendItemsGenerator(bklass,
                                                           backend_args,
                                                           category)

        events = eventize(backend, self._big.items)
        for event in events:
            self._metadata(event)
            data = to_json(event)
            self.connection.rpush(qitems, data)

        return self._perceval_result

    def _metadata(self, item: dict[str, Any]) -> None:
        """Add metadata to an item.

        Method that adds in place metadata to Perceval items such as
        the identifier of the job that generated it or the version of
        the system.

        :param item: an item generated by Perceval
        """
        # TODO: add Grimoirelab core version?
        item['job_id'] = self.get_id()

    def _add_log_handler(self):
        """Add log handler to the job"""

        self.job_logger = JobLogHandler(self)
        for logger_name in [__name__, 'perceval', 'rq']:
            logger_job = logging.getLogger(logger_name)
            logger_job.setLevel(logging.INFO)
            logger_job.addHandler(self.job_logger)

    def _remove_log_handler(self):
        for logger_name in [__name__, 'perceval', 'rq']:
            logger_job = logging.getLogger(logger_name)
            logger_job.removeHandler(self.job_logger)

    def _execute(self):
        try:
            self._add_log_handler()
            return self.run(*self.args, **self.kwargs)
        finally:
            self.meta['result'] = self.perceval_result
            self.save_meta()
            self._remove_log_handler()
